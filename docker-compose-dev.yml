# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: trail-backend
    build:
      context: ./backend
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /usr/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./trail-backend/package.json
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - 3000:3000
    links:
      - db

  db:
    container_name: trail-db
    image: postgis/postgis:latest
    volumes:
      - ./db/postgresql:/var/lib/postgresql/data
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - ALLOW_IP_RANGE=0.0.0.0/0
    ports:
      - "${DB_PORT}:5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=${DB_PASSWORD} pg_isready -h 127.0.0.1 -U ${DB_USER} -d gis"
#  frontend:
#    container_name: trail-frontend
#    build:
#      context: ./frontend
#    develop:
#      watch:
#        - action: sync
#          path: ./frontend
#          target: /app
#          ignore:
#            - node_modules/
#        - action: rebuild
#          path: ./frontend/package.json
#    ports:
#      - "${FRONTEND_PORT}:8080"
